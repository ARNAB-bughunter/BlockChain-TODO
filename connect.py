import json
from web3 import Web3

def deploy():
    global contract,web3
    ganache_url = "HTTP://127.0.0.1:7545"
    web3 = Web3(Web3.HTTPProvider(ganache_url))

    web3.eth.default_account=web3.eth.accounts[0]

    byteCode="60806040526000805534801561001457600080fd5b50610698806100246000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063111002aa146100675780634ad0e59014610122578063560f31921461015057806386533f6c1461017e5780638d97767214610243578063b6cb58a5146102fc575b600080fd5b6101206004803603602081101561007d57600080fd5b810190808035906020019064010000000081111561009a57600080fd5b8201836020820111156100ac57600080fd5b803590602001918460018302840111640100000000831117156100ce57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061031a565b005b61014e6004803603602081101561013857600080fd5b81019080803590602001909291905050506103ac565b005b61017c6004803603602081101561016657600080fd5b81019080803590602001909291905050506103dd565b005b6102416004803603604081101561019457600080fd5b8101908080359060200190929190803590602001906401000000008111156101bb57600080fd5b8201836020820111156101cd57600080fd5b803590602001918460018302840111640100000000831117156101ef57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610422565b005b61026f6004803603602081101561025957600080fd5b81019080803590602001909291905050506104a1565b604051808481526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b838110156102bf5780820151818401526020810190506102a4565b50505050905090810190601f1680156102ec5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b610304610570565b6040518082815260200191505060405180910390f35b600080815480929190600101919050555060405180606001604052806000548152602001828152602001600015158152506001600080548152602001908152602001600020600082015181600001556020820151816001019080519060200190610385929190610576565b5060408201518160020160006101000a81548160ff02191690831515021790555090505050565b600180600083815260200190815260200160002060020160006101000a81548160ff02191690831515021790555050565b6001600082815260200190815260200160002060008082016000905560018201600061040991906105f6565b6002820160006101000a81549060ff0219169055505050565b60405180606001604052808381526020018281526020016000151581525060016000848152602001908152602001600020600082015181600001556020820151816001019080519060200190610479929190610576565b5060408201518160020160006101000a81548160ff0219169083151502179055509050505050565b6001602052806000526040600020600091509050806000015490806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105535780601f1061052857610100808354040283529160200191610553565b820191906000526020600020905b81548152906001019060200180831161053657829003601f168201915b5050505050908060020160009054906101000a900460ff16905083565b60005481565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105b757805160ff19168380011785556105e5565b828001600101855582156105e5579182015b828111156105e45782518255916020019190600101906105c9565b5b5090506105f2919061063e565b5090565b50805460018160011615610100020316600290046000825580601f1061061c575061063b565b601f01602090049060005260206000209081019061063a919061063e565b5b50565b61066091905b8082111561065c576000816000905550600101610644565b5090565b9056fea265627a7a72315820d8b176c10bf0afc524b83d4bc30e35fa41337ed3737877e6afaa29a58e095a2864736f6c63430005110032"

    abi=json.loads('[{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":false,"inputs":[{"internalType":"string","name":"_content","type":"string"}],"name":"createTask","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"deleteTask","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"markDone","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"taskCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tasks","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"content","type":"string"},{"internalType":"bool","name":"completed","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"string","name":"_content","type":"string"}],"name":"updateTask","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]');

    
    TodoList = web3.eth.contract(abi=abi,bytecode=byteCode)

    tx_hash=TodoList.constructor().transact()

    tx_receipt=web3.eth.waitForTransactionReceipt(tx_hash)

    contract=web3.eth.contract(
        address=tx_receipt.contractAddress,
        abi=abi
    )


def setAccount(ACCOUNT_ADDRESS):
    web3.eth.default_account=ACCOUNT_ADDRESS

    
def createTask(content):
    contract.functions.createTask(content).transact()

def updateTask(id,content):
    contract.functions.updateTask(id,content).transact()

def deleteTask(id):
    contract.functions.deleteTask(id).transact()

def taskCount():
    return (contract.functions.taskCount().call())

def getTask(id):
    return (contract.functions.tasks(id).call())

def markTrue(id):
    contract.functions.markDone(id).transact()



